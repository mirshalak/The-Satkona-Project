12345678901234567890123456789012345678901234567890123456789012345678901234567890

The Skeleton Key, or 8 core functions.  This may be abbreviated to "SK8."

0001:push  (Transmit data to stack memory)
0002:store (Transmit data to register/heap memory)
0003:pop (Receive data from stack memory)   
0004:load (Receive data from register/heap memory)
0005:define-word (This is equivalent to the word compilation pair in FORTH)
0006:execute-word 
0007:add  
0008:subtract

sk8-purpose("To create a semantic framework and execution model, which
allows the reliable generation of code by artificial intelligence.  It has been
observed that language models produce much more elegant and reliable code, when
the parameter stack is used as the central data structure.").

two-stacks("Parameter stack and return stack.").
parameter-stack-contents("Word parameter data.").
return-stack-contents("Addresses of 1 or more words to be executed.").
heap-contents("Definitions and contents of words.").
parameter-stack("Preferred mechanism for all general-purpose computation.").
store-and-load-words("Exist solely to support the operation of define-word and execute-word.").
store-and-load-words("Not to be used otherwise.").

word-addresses("Words are to have Hexgate addresses, following the above 8.").

loop-branch("Looping and branching are to be achieved via define-word,
execute-word, and the return stack.").

core-invariance("The core SK8 instruction set (001â€“008) must remain immutable
and distinct from all higher-level or API-specific word dictionaries. This
ensures minimal survivable execution and prevents dependency pollution.").

word-tokens("Words consist of individual tokens, which begin and end with the space character: ASCII decimal code 32.")
word-start("define-word")
word-second-token("word address")
word-third-to-last-token("word body")
word-end("end-define")
word-example("define-word 0009 0001 42 0001 42 0007 end-define")

// sk8_core.js

export class SK8VM {
  constructor() {
    this.parameterStack = [];
    this.returnStack = [];
    this.heap = new Map();
    this.registers = {};
    this.hostBindings = {};
  }

  defineWord({ address, body }) {
    this.heap.set(String(address), body);
  }

  call(address) {
    this.returnStack.push(String(address));
  }

  executeNextWord() {
    if (this.returnStack.length === 0) {
      throw new Error("Return stack is empty.");
    }

    const addr = this.returnStack.pop();
    const word = this.heap.get(String(addr));

    if (!word) {
      throw new Error(`No word defined at address ${addr}`);
    }

    for (const opcode of word) {
      this.executeInstruction(opcode);
    }
  }

  executeInstruction(opcode) {
    const instr = opcode[0];
    const arg = opcode[1];

    switch (instr) {
      case 1: // push
        this.parameterStack.push(arg);
        break;
      case 2: // store
        this.registers[arg] = this.parameterStack.pop();
        break;
      case 3: // pop
        this.parameterStack.pop();
        break;
      case 4: // load
        this.parameterStack.push(this.registers[arg]);
        break;
      case 5: // define-word
        break; // handled externally
      case 6: // execute-word
        this.executeNextWord();
        break;
      case 7: // add
        {
          const b = this.parameterStack.pop();
          const a = this.parameterStack.pop();
          this.parameterStack.push(a + b);
        }
        break;
      case 8: // subtract
        {
          const b = this.parameterStack.pop();
          const a = this.parameterStack.pop();
          this.parameterStack.push(a - b);
        }
        break;
      case 9: // host-bound
        this.hostCall(arg);
        break;
      default:
        throw new Error(`Unknown opcode: ${instr}`);
    }
  }

  bindHostFunction(name, fn) {
    this.hostBindings[name] = fn;
  }

  hostCall(name) {
    const fn = this.hostBindings[name];
    if (!fn) throw new Error(`Host function not found: ${name}`);
    fn(this);
  }

  dumpStacks() {
    return {
      parameter: [...this.parameterStack],
      return: [...this.returnStack],
      heap: [...this.heap.entries()]
    };
  }
}
