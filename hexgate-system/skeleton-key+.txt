12345678901234567890123456789012345678901234567890123456789012345678901234567890

The Skeleton Key, or 8 core functions.  This may be abbreviated to "SK8."

<push>		::= "push" <integer> /* push to stack */
<pop>		::= "pop" /* pop from stack */
<store>		::= "store" /* move stack value to heap */
<load>		::= "load" /* move heap value to stack */
<define-word>	::= "define-word" <word-name> <word-body> "end-define"
<execute-word>	::= "execute-word"
<add> 		::= "add"
<subtract> 	::= "subtract"

<word-name> ::= <identifier>
<word-body> ::= (<word-token>)*

<word-token> ::= <push> | <pop> | <store> | <load> | <add> | <subtract> | 
<execute-word> | <define-word> | <user-defined-words>

<identifier> ::= /* alphanumeric ASCII excluding whitespace and control chars */
<integer> ::= /* sequence of digits, decimal base */

sk8-purpose+01("To permit total reconstruction from the minimal viable initial
state.  Viable is defined by the ability to execute secondary loops, which 
Brainf*** in particular was incapable of.").

sk8-purpose+02("To create a semantic framework and execution model, which
allows the reliable generation of code by artificial intelligence.  It has been
observed that language models produce much more elegant and reliable code, when
the parameter stack is used as the central data structure.").

core-vs-hosts("All physical or virtual machines which are capable of 
implementing the 8 core words, are defined as hosts.  The core may be likened 
to DNA; it changes very slowly.  Hosts may be compared with RNA; they are 
transient, and come and go rapidly.  This conscious distinction is vital to this
system's survival, and must be preserved.").

encoding-neutral-core("SK8 makes no implicit assumption about character or
string encoding.  Conversion between symbolic text and numeric values 
(such as UTF-8 or ASCII) is delegated to host-specific or application-specific 
dictionaries. This permits maximal portability and eliminates platform coupling.  
If the host permits the use of ASCII or UTF, these may be used freely on the 
parameter stack, as long as they do not cause conflicts.  The authorship of 
host-specific ASCII/UTF to int translation words is encouraged, however, 
as it may enable the subversion of oppressive design elements in some 
contemporary host languages.").

two-stacks("Parameter stack and return stack.").

parameter-stack-contents("Word parameter data.").

return-stack-contents("Addresses of 1 or more words to be executed.").

heap-contents("Definitions and contents of words.").

parameter-stack("Preferred mechanism for all general-purpose computation.").

store-and-load-words("Exist solely to support the operation of define-word 
and execute-word.").

store-and-load-words("Not to be used otherwise.").

word-addresses("Words are to have Hexgate addresses, following the above 
8.").

ephemeral-numbers+01("Any single-digit or otherwise non-NNN token that lacks 
two leading zeroes is to be considered ephemeral. Such words are temporary 
constructs used for dynamic control flow or intermediate computation and are 
not to be treated as routable Hexgate addresses.")

ephemeral-numbers+02(001 is a formal Hexgate address.  1 (without leading 
zeroes) is an ephemeral lexical token.  They are not equal semantically or 
syntactically.).

no-explicit-branching("Hexgate addressing gives everything within a given
physical or virtual environment an address, and the address of every object, is
also the address of the relevant word for interacting with it within the
system.  Branching can be achieved by assigning a relevant address to every
point within a system.  For a thermostat as one example, every word numbered
between 9 and 100 within the current dictionary, could represent the
corresponding temperature.

There is one exception to this rule.  If execution speed is radically increased
via the use of the host language's native loops, then for large numbers of 
iterations, their use will be permitted instead.  But only the implicit goto is
permitted for use by the host-agnostic core itself.  This is not specified in
the core directly, because while necessary, it is not irreducible, and therefore
must be defined by the host.").

implicit-goto("
push <hexgate-address> /* from return stack */
execute-word  
").

core-invariance("The core SK8 instruction set (001â€“008) must remain immutable
and distinct from all higher-level or API-specific word dictionaries. This
ensures minimal survivable execution and prevents dependency pollution.").

word-tokens("Words consist of individual tokens, which begin and end with the
space character: ASCII decimal code 32.") 
word-start("define-word").
word-second-token("word address").
word-third-token("word-name").
word-fourth-to-nth-token("word body").
word-end("end-define.").
word-example("define-word 009 dup heap-variable store heap-variable load end-define").

```javascript
// skeleton_key_vm.js

class SK8VM {
  constructor() {
    this.parameterStack = [];
    this.returnStack = [];
    this.heap = new Map(); // wordAddress (as string) => array of opcodes
    this.registers = {};   // not used directly, preserved for load/store
  }

  executeNextWord() {
    if (this.returnStack.length === 0) {
      throw new Error("Return stack is empty; no word to execute.");
    }

    const addr = this.returnStack.pop();
    const word = this.heap.get(String(addr));

    if (!word) {
      throw new Error(`No word defined at address ${addr}`);
    }

    for (const opcode of word) {
      this.executeInstruction(opcode);
    }
  }

  executeInstruction(opcode) {
    const instr = opcode[0];
    const arg = opcode[1];

    switch (instr) {
      case 1: // push
        this.parameterStack.push(arg);
        break;
      case 2: // store
        this.registers[arg] = this.parameterStack.pop();
        break;
      case 3: // pop
        this.parameterStack.pop();
        break;
      case 4: // load
        this.parameterStack.push(this.registers[arg]);
        break;
      case 5: // define-word
        this.defineWord(arg);
        break;
      case 6: // execute-word (pull next address from return stack)
        this.executeNextWord();
        break;
      case 7: // add
        const b = this.parameterStack.pop();
        const a = this.parameterStack.pop();
        this.parameterStack.push(a + b);
        break;
      case 8: // subtract
        const d = this.parameterStack.pop();
        const c = this.parameterStack.pop();
        this.parameterStack.push(c - d);
        break;
      default:
        throw new Error(`Unknown opcode: ${instr}`);
    }
  }

  defineWord(wordDefinition) {
    // wordDefinition: { address: number|string, body: [ [opcode, arg], ... ] }
    if (!wordDefinition || typeof wordDefinition.address === "undefined" || !Array.isArray(wordDefinition.body)) {
      throw new Error("Invalid word definition format.");
    }

    const addr = String(wordDefinition.address);
    this.heap.set(addr, wordDefinition.body);
  }

  // Helper to load a word address into return stack
  call(address) {
    this.returnStack.push(String(address));
  }

  dumpStacks() {
    return {
      parameterStack: [...this.parameterStack],
      returnStack: [...this.returnStack],
    };
  }
}

export default SK8VM;
```
