12345678901234567890123456789012345678901234567890123456789012345678901234567890

SK13:The Skeleton Key.

001:push
002:pop
003:store
004:load
005:parameter-to-return
006:return-to-parameter
007:define-word
008:end-define
009:add
010:subtract
011:char-to-int
012:int-to-char
013:execute-word

invariant-core(If 001 to 013 are ever redefined, it will only be after long 
discussion and consideration.  It will never happen within an actively running 
program.).

memory-type+01(parameter stack).

memory-type+02(return stack).

memory-type+03(heap).

heap-purpose(recording word definitions.  Heap use separates control flow (stack) 
from definition space (heap).).

heap-word-addresses(14 to 995).

heap-reserved-register-addresses(995-999).

heap-reserved-registers-purpose(Storage of temporary variables for individual 
words.).

heap-register-deletion(Deleting the current value of a heap register, may be 
performed with `001 995 001 000 003`, where 995 is an example of the register 
to delete).

return-stack-purpose(enables indirect threaded code, eliminates need for 
explicit branching).

define-word-process(Begin compile mode. From this point, the interpreter must 
accumulate tokens into a buffer, and must not execute them until end-define is 
encountered. At end-define, store the buffer under the specified address and 
resume interpret mode.)



words-are-tokens(Words consist of tokens, bounded by the space character. (ASCII code 32)).


Word format is as follows:-

007 <word-define>
<3 digit hexgate address.  Possible ranges are 14 to 995.>
<integer value of each ascii character in word name> 
<word body>
008 <end-define>

Example:-

007 
001 014
001 105

001 48
001 48
009
008
